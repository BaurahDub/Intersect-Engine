From ec187c87bf31cc0e38a527c6a3380b84aaa3764d Mon Sep 17 00:00:00 2001
From: Joyce <azurebeats@hotmail.nl>
Date: Sun, 2 Aug 2020 07:48:02 +0200
Subject: [PATCH] Add the ability to show level and classes

Configurable through server config with language support and custom colors.
---
 Intersect (Core)/Config/PlayerOptions.cs     |  2 +
 Intersect (Core)/CustomColors.cs             |  2 +
 Intersect (Core)/Enums/DisplayLevelStyles.cs | 15 +++++
 Intersect (Core)/Intersect (Core).csproj     |  1 +
 Intersect.Client/Entities/Entity.cs          | 61 ++++++++++++++++++--
 Intersect.Client/Localization/Strings.cs     |  7 +++
 6 files changed, 84 insertions(+), 4 deletions(-)
 create mode 100644 Intersect (Core)/Enums/DisplayLevelStyles.cs

diff --git a/Intersect (Core)/Config/PlayerOptions.cs b/Intersect (Core)/Config/PlayerOptions.cs
index 91aa3e865..e10d10845 100644
--- a/Intersect (Core)/Config/PlayerOptions.cs	
+++ b/Intersect (Core)/Config/PlayerOptions.cs	
@@ -22,6 +22,8 @@ public class PlayerOptions
 
         public int TradeRange = 6;
 
+        public int DisplayLevelStyle = 2;
+
     }
 
 }
diff --git a/Intersect (Core)/CustomColors.cs b/Intersect (Core)/CustomColors.cs
index 74a77ecbf..163fe60b3 100644
--- a/Intersect (Core)/CustomColors.cs	
+++ b/Intersect (Core)/CustomColors.cs	
@@ -69,6 +69,8 @@ public sealed class NamesNamespace
 
             public LabelColor Events = new LabelColor(Color.White, Color.Black, new Color(180, 0, 0, 0));
 
+            public LabelColor Class = new LabelColor(new Color(255, 255, 255, 255), Color.Black, new Color(180, 0, 0, 0));
+
             public Dictionary<string, LabelColor> Npcs = new Dictionary<string, LabelColor>()
             {
                 {"Neutral", new LabelColor(new Color(255, 100, 230, 100), Color.Black, new Color(180, 0, 0, 0))},
diff --git a/Intersect (Core)/Enums/DisplayLevelStyles.cs b/Intersect (Core)/Enums/DisplayLevelStyles.cs
new file mode 100644
index 000000000..ceccb90c2
--- /dev/null
+++ b/Intersect (Core)/Enums/DisplayLevelStyles.cs	
@@ -0,0 +1,15 @@
+ï»¿namespace Intersect.Enums
+{
+    
+    public enum DisplayLevelStyles
+    {
+
+        NameOnly = 0,
+
+        NameLevel,
+
+        NameClassLevel
+
+    }
+
+}

diff --git a/Intersect.Client/Entities/Entity.cs b/Intersect.Client/Entities/Entity.cs
index 9b0d7d895..4519790cd 100644
--- a/Intersect.Client/Entities/Entity.cs
+++ b/Intersect.Client/Entities/Entity.cs
@@ -36,7 +36,9 @@ public enum LabelType
 
             Name,
 
-            ChatBubble
+            ChatBubble,
+
+            Class,
 
         }
 
@@ -1322,7 +1324,28 @@ public virtual void DrawName(Color textColor, Color borderColor = null, Color ba
                 return;
             }
 
-            var textSize = Graphics.Renderer.MeasureText(Name, Graphics.EntityNameFont, 1);
+            var displayName = Name;
+            var displayClass = String.Empty;
+            switch (Options.Player.DisplayLevelStyle)
+            {
+                case (int)DisplayLevelStyles.NameLevel:
+                    displayName = Localization.Strings.GameWindow.CharacterName.ToString(Name, Level);
+                    break;
+
+                case (int)DisplayLevelStyles.NameClassLevel:
+                    if (this is Player player)
+                    {
+                        displayClass = Localization.Strings.GameWindow.CharacterClass.ToString(ClassBase.GetName(player.Class), player.Level);
+                    }
+                    break;
+
+                case (int)DisplayLevelStyles.NameOnly:
+                default:
+                    break;
+
+            }
+
+            var textSize = Graphics.Renderer.MeasureText(displayName, Graphics.EntityNameFont, 1);
 
             var x = (int) Math.Ceiling(GetCenterPos().X);
             var y = GetLabelLocation(LabelType.Name);
@@ -1336,14 +1359,40 @@ public virtual void DrawName(Color textColor, Color borderColor = null, Color ba
             }
 
             Graphics.Renderer.DrawString(
-                Name, Graphics.EntityNameFont, (int) (x - (int) Math.Ceiling(textSize.X / 2f)), (int) y, 1,
+                displayName, Graphics.EntityNameFont, (int) (x - (int) Math.Ceiling(textSize.X / 2f)), (int) y, 1,
                 Color.FromArgb(textColor.ToArgb()), true, null, Color.FromArgb(borderColor.ToArgb())
             );
+
+            // Do we need to render the class data?
+            if (displayClass != String.Empty)
+            {
+                textSize = Graphics.Renderer.MeasureText(displayClass, Graphics.EntityNameFont, 1);
+                textColor = CustomColors.Names.Class.Name;
+                backgroundColor = CustomColors.Names.Class.Background;
+                borderColor = CustomColors.Names.Class.Outline;
+
+                x = (int)Math.Ceiling(GetCenterPos().X);
+                y = GetLabelLocation(LabelType.Class);
+
+                if (backgroundColor != Color.Transparent)
+                {
+                    Graphics.DrawGameTexture(
+                        Graphics.Renderer.GetWhiteTexture(), new FloatRect(0, 0, 1, 1),
+                        new FloatRect(x - textSize.X / 2f - 4, y, textSize.X + 8, textSize.Y), backgroundColor
+                    );
+                }
+
+                Graphics.Renderer.DrawString(
+                    displayClass, Graphics.EntityNameFont, (int)(x - (int)Math.Ceiling(textSize.X / 2f)), (int)y, 1,
+                    Color.FromArgb(textColor.ToArgb()), true, null, Color.FromArgb(borderColor.ToArgb())
+                );
+            }
         }
 
         public float GetLabelLocation(LabelType type)
         {
             var y = GetTopPos() - 4;
+            var nameSize = Graphics.Renderer.MeasureText(Name, Graphics.EntityNameFont, 1);
             switch (type)
             {
                 case LabelType.Header:
@@ -1369,7 +1418,6 @@ public float GetLabelLocation(LabelType type)
                     break;
                 case LabelType.Name:
                     y = GetLabelLocation(LabelType.Footer);
-                    var nameSize = Graphics.Renderer.MeasureText(Name, Graphics.EntityNameFont, 1);
                     if (string.IsNullOrEmpty(FooterLabel.Text))
                     {
                         y -= nameSize.Y - 8;
@@ -1383,6 +1431,11 @@ public float GetLabelLocation(LabelType type)
                 case LabelType.ChatBubble:
                     y = GetLabelLocation(LabelType.Header) - 4;
 
+                    break;
+                case LabelType.Class:
+                    nameSize = Graphics.Renderer.MeasureText(Name, Graphics.EntityNameFont, 1);
+                    y = GetLabelLocation(LabelType.Name) - nameSize.Y;
+
                     break;
             }
 
diff --git a/Intersect.Client/Localization/Strings.cs b/Intersect.Client/Localization/Strings.cs
index b556e8027..185f9f884 100644
--- a/Intersect.Client/Localization/Strings.cs
+++ b/Intersect.Client/Localization/Strings.cs
@@ -1534,6 +1534,13 @@ public struct Update
 
         }
 
+        public struct GameWindow
+        {
+            public static LocalizedString CharacterName = @"{00} lv.{01}";
+
+            public static LocalizedString CharacterClass = @"{00} lv.{01}";
+        }
+
     }
 
 }
